{"version":3,"sources":["mcage.ts"],"names":["__awaiter","this","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","TimeDelta","[object Object]","time","years","Math","floor","months","days","parts","forEach","p","key","substr","length","push","join","params","URLSearchParams","window","location","search","filterableProperties","filter","has","set","versions","res","fetch","json","get_manifest","get","v","version","delta","Date","now","parse","releaseTime","age","id","link","document","body","innerHTML","getElementById","style","display"],"mappings":"AAAA,IAAIA,UAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAASC,EAAYC,EAAGC,GAE1E,OAAO,IAAKD,IAAMA,EAAIE,UAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,IAAW,MAAOG,GAAKL,EAAOK,IACpF,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAiB,MAAEK,IAAW,MAAOG,GAAKL,EAAOK,IACvF,SAASF,EAAKI,GAJlB,IAAeL,EAIaK,EAAOC,KAAOT,EAAQQ,EAAOL,QAJ1CA,EAIyDK,EAAOL,MAJhDA,aAAiBN,EAAIM,EAAQ,IAAIN,EAAE,SAAUG,GAAWA,EAAQG,MAITO,KAAKR,EAAWK,GAClGH,GAAMN,EAAYA,EAAUa,MAAMhB,EAASC,GAAc,KAAKS,YAGtE,WACWZ,UAAUC,UAAM,OAAQ,EAAQ,YAOnC,MAAMkB,EACFC,YAAYC,GACRA,GAAQ,MACRpB,KAAKqB,MAAQC,KAAKC,MAAMH,EAAO,QAC/BA,GAAQ,OACRpB,KAAKwB,OAASF,KAAKC,MAAMH,EAAO,MAChCA,GAAQ,KACRpB,KAAKyB,KAAOH,KAAKC,MAAMH,GAE3BD,WACI,IAAIO,EAAQ,GAQZ,MAPA,CAAC,QAAS,SAAU,QAAQC,QAAQC,IAChC,IAAInB,EAAQT,KAAK4B,GACbC,EAAMD,EAAEE,OAAO,EAAGF,EAAEG,OAAS,GAC7BtB,GACAiB,EAAMM,QAAQvB,KAASoB,IAAMpB,EAAQ,EAAI,IAAM,QAGhDiB,EAAMO,KAAK,OAG1B,MAAMC,EAAS,IAAIC,gBAAgBC,OAAOC,SAASC,QAC7CC,EAAuB,CAAC,KAAM,QAC2B,IAA3DA,EAAqBC,OAAOZ,GAAKM,EAAOO,IAAIb,IAAIG,QAChDG,EAAOQ,IAAI,OAAQ,WAGvB,IAAIC,SAjCJ,WACI,OAAO5C,UAAUC,UAAM,OAAQ,EAAQ,YACnC,IAAI4C,QAAYC,MAAM,iEACtB,aAAaD,EAAIE,SA6BFC,IACCJ,SACxB,IAAK,MAAMf,KAAKW,EACRL,EAAOc,IAAIpB,KACXe,EAAWA,EAASH,OAAOS,GAAKf,EAAOc,IAAIpB,KAAOqB,EAAErB,KAG5De,EAAShB,QAAQuB,IACb,IAAIC,EAAQC,KAAKC,MAAQD,KAAKE,MAAMJ,EAAQK,aACxCC,eAAmBN,EAAQO,SAAS,IAAIvC,EAAUiC,UAClDO,EAAO,OAASR,EAAQO,GAC5BE,SAASC,KAAKC,0CAA4CH,MAASF,cAEnEb,EAASZ,OAAS,IAClB4B,SAASG,eAAe,SAASC,MAAMC,QAAU,aAhD7D","sourcesContent":["(async function () {\r\n    interface Manifest {\r\n        latest: {\r\n            release: string;\r\n            snapshot: string;\r\n        };\r\n        versions: {\r\n            id: string\r\n            type: string\r\n            url: string\r\n            time: string\r\n            releaseTime: string\r\n        }[];\r\n    }\r\n\r\n    async function get_manifest(): Promise<Manifest> {\r\n        let res = await fetch(\"https://launchermeta.mojang.com/mc/game/version_manifest.json\");\r\n        return await res.json();\r\n    }\r\n\r\n    class TimeDelta {\r\n        years: number;\r\n        months: number;\r\n        days: number;\r\n\r\n        constructor(time: number) {\r\n            time /= 24 * 60 * 60 * 1000;\r\n            this.years = Math.floor(time / 365.25);\r\n\r\n            time %= 365.25;\r\n            this.months = Math.floor(time / 30.5);\r\n\r\n            time %= 30.5;\r\n            this.days = Math.floor(time);\r\n        }\r\n\r\n        toString() {\r\n            let parts = [];\r\n            [\"years\", \"months\", \"days\"].forEach(p => {\r\n                let value = this[p];\r\n                let key = p.substr(0, p.length - 1);\r\n                if (value) {\r\n                    parts.push(`${value} ${key}${value > 1 ? \"s\" : \"\"}`);\r\n                }\r\n            });\r\n            return parts.join(\", \");\r\n        }\r\n    }\r\n\r\n    const params = new URLSearchParams(window.location.search);\r\n\r\n    const filterableProperties = [\"id\", \"type\"];\r\n\r\n    if (filterableProperties.filter(p => params.has(p)).length === 0) {\r\n        params.set(\"type\", \"release\");\r\n    }\r\n\r\n    const manifest = await get_manifest();\r\n\r\n    let versions = manifest.versions;\r\n    for (const p of filterableProperties) {\r\n        if (params.get(p)) {\r\n            versions = versions.filter(v => params.get(p) === v[p]);\r\n        }\r\n    }\r\n    versions.forEach(version => {\r\n        let delta = Date.now() - Date.parse(version.releaseTime);\r\n\r\n        let age = `Minecraft ${version.id} is ${new TimeDelta(delta)} old.`;\r\n        let link = \"?id=\" + version.id;\r\n\r\n        document.body.innerHTML += `<p class=\"version\"><a href=\"${link}\">${age}</a></p>`;\r\n    });\r\n    if (versions.length > 1) {\r\n        document.getElementById(\"intro\").style.display = \"initial\";\r\n    }\r\n})();\r\n"],"file":"mcage.min.js"}